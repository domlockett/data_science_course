<noscript>
<link rel="stylesheet" href="css/style.css" />
<link rel="stylesheet" href="css/style-desktop.css" />
</noscript>
<!--[if lte IE 8]><link rel="stylesheet" href="css/ie/v8.css" /><![endif]-->
<!--[if lte IE 9]><link rel="stylesheet" href="css/ie/v9.css" /><![endif]-->
</head>
<div class="wrapper style1 first">
<article class="container" id="top">
<div class="row">
<div class="4u">
<span class=""><img src="images/picme.JPG" width="200" height="300" /></span>
</div>
<div class="8u">
<header>
</header>
<p align = right>Hi! I am a political science PhD student at Washington University in St. Louis. I study political methodology and American political behavior. I am particiularly interested in how identity– ranging from partisan identity to racial identity– impacts behavior amongst Americans.</p>
</div>
</div>
</article>
</div>
</body>
</html>
3. $\sin(\pi/3) \times (1 + \tan(\pi/3))
<br></br>
<br></br>
---
title: ""
output: pdf_document
---
\center
Statistical Computing Activity </p>
<p align="center">
Activity 1
\center
<p align="left">
<b>
Put your name at the top of of this sheet. Write the R code to answer the following questions. Write the code and then show what the computer returns when that code is rn.
</b> </p>
---
title: ""
output: pdf_document
---
\center
Statistical Computing Activity </p>
<p align="center">
Activity 1
\left
---
title: ""
output: pdf_document
---
\center
Statistical Computing Activity
Activity 1
\begin{flushleft}
**Put your name at the top of of this sheet. Write the R code to answer the following questions. Write the code and then show what the computer returns when that code is rn.**
\end{flushleft}
\usepackage{amsmath, geometry,hyperref, setspace}
\usepackage{url}
\begin{center}
{\large    Statistical Computing\\
Activity 2 }
\end{center}
install.packages(c("binr", "ggplot2", "gmodels", "gridExtra", "lfe", "lme4", "lmtest", "multiwayvcov", "plm", "readstata13", "reshape", "sjmisc", "sjPlot", "stargazer", "tidyr"))
rm(list=ls())
example(lm)
summary(lm.D90)
source('~/.active-rstudio-document', echo=TRUE)
newLM<-unclass(lm.D90)
class(newLM)
class(lm.D90)
names(newLM)
summary(lm.D90)
summary(newLM)
newLM$model
names(newLM$model)
names(newLM$model) <-c("var1","var2")
names(newLM$model)
newLM$model[2]
newLM<-unclass(lm.D90)
newLM$model
newLM$model[2]
newLM$model[2] <-sample(newLM$model[2])
newLM$model[2]
sample(newLM$model[2])
sample(newLM$model[2],1:20)
newLM$model[2] <-transform(newLM$model[2], C= sample(C))
newLM$model[2]
transform(newLM$model[2], C= sample(C))
newLM$model[2] <-transform(newLM$model[2], newLM$model[2]= sample(newLM$model[2]))
newLM$model[2] <-transform(newLM$model[2], sample(newLM$model[2]))
newLM$model[2]
sample(newLM$model[2])
sample(1:20)
newLM$model[2] <- sample(1:10)
newLM$model[2]
newLM$model[2] <-
newLM$model[sample(1:10)]
newLM$model[2] <-
newLM$model[,sample(1:10)]
newLM$model[sample(1:10)]
newLM$model[2][sample(1:10),]
newLM<-unclass(lm.D90)
newLM$model[2]
newLM$model
newLM$model[sample(1:10),]
newerLM <- list("model"<-lm.D90$coefficients, "newLM" <- newLM$coefficients)
newerLM
str(newLM)
newLM<-unclass(lm.D90)
str(newLM)
install.packages("xaringan")
library(xaringan)
gettysburg<-read.delim("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
View(gettysburg)
readlines('http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg')
readLines('http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg')
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
View(gettysburg)
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")\
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg")
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/Activity3/Gettysburg", warn=F)
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/
Activity3/Gettysburg",warn=F)
gettysburg<-NULL
gettysburg<-readLines("http://politicaldatascience.com/PDS/ClassActivities/
Activity3/Gettysburg",warn=F)
gettysburg
rm(list=ls())
example(lm)
newLM$model[,sample(1:10)]
rm(list=ls())
example(lm)
summary(lm.D90)
newLM<-unclass(lm.D90)
#1
class(lm.D90)
class(newLM)
names(newLM$model) <-c("var1","var2")
newLM$model[2]
newLM$model[,sample(1:10)]
newLM$model[2][sample(1:10),]
newLM$model[2][sample(1:18),]
newerLM <- list("model"<-lm.D90$coefficients, "newLM" <- newLM$coefficients)
newerLM
class(newLM[1])
class(newLM[[1]])
vector1<-c(1,2,3)
gospels<-c("matthew","mark","luke", "john")
my.matrix<-matrix(c(1:20), nrow=4)
my.data<-data.frame(cbind(vap, tv))
my.crazy.list<-list(vector1, gospels, my.matrix, TRUE, list.a)
list.a<-list(m1, vap, 3)
vector1<-c(1,2,3)
gospels<-c("matthew","mark","luke", "john")
my.matrix<-matrix(c(1:20), nrow=4)
vap<-voting.age.population<-c(3481823, 496387, 4582842, 2120139,26955438,
3617942,2673154,652189,472143,14085749,6915512,
995937,1073799,9600372,4732010,2265860,2068253,
3213141,3188765,1033632,4242214,4997677,7620982,
3908159,2139918,4426278,731365,1321923,1870315,1012033,
6598368,1452962,14838076,6752018,494923,8697456,2697855,
2850525,9612380,824854,3303593,594599,4636679,
17038979,1797941,487900,5841335,4876661,1421717,
4257230,392344)
total.votes<-tv<-c(NA, 238307, 1553032, 780409,8899059,1586105,
1162391,258053, 122356,4884544, 2143845,348988,
458927,3586292, 1719351,1071509, 864083,1370062,
954896,NA, 1809237, 2243835,3852008, 2217552,NA,
2178278, 411061,610499, 586274,418550, 2315643,568597,
4703830,2036451, 220479,4184072, NA,1399650, NA,392882,
1117311,341105, 1868363,NA, 582561, 263025,2398589,
2085074,473014, 2183155, 196217)
m1<-cbind(vap, tv)
list.a<-list(m1, vap, 3)
vector1<-c(1,2,3)
gospels<-c("matthew","mark","luke", "john")
my.matrix<-matrix(c(1:20), nrow=4)
my.data<-data.frame(cbind(vap, tv))
my.crazy.list<-list(vector1, gospels, my.matrix, TRUE, list.a)
my.crazy.list[[1]]
my.crazy.list[1
]
m2<-rbind(vap, tv)
dimnames(m1)[[2]][1]<-"Pigglywiggly"
list.a<-list(m1, vap, 3)
rm(list=ls())
vap<-voting.age.population<-c(3481823, 496387, 4582842, 2120139,26955438,
3617942,2673154,652189,472143,14085749,6915512,
995937,1073799,9600372,4732010,2265860,2068253,
3213141,3188765,1033632,4242214,4997677,7620982,
3908159,2139918,4426278,731365,1321923,1870315,1012033,
6598368,1452962,14838076,6752018,494923,8697456,2697855,
2850525,9612380,824854,3303593,594599,4636679,
17038979,1797941,487900,5841335,4876661,1421717,
4257230,392344)
total.votes<-tv<-c(NA, 238307, 1553032, 780409,8899059,1586105,
1162391,258053, 122356,4884544, 2143845,348988,
458927,3586292, 1719351,1071509, 864083,1370062,
954896,NA, 1809237, 2243835,3852008, 2217552,NA,
2178278, 411061,610499, 586274,418550, 2315643,568597,
4703830,2036451, 220479,4184072, NA,1399650, NA,392882,
1117311,341105, 1868363,NA, 582561, 263025,2398589,
2085074,473014, 2183155, 196217)
m1<-cbind(vap, tv)
list.a<-list(m1, vap, 3)
vector1<-c(1,2,3)
gospels<-c("matthew","mark","luke", "john")
my.matrix<-matrix(c(1:20), nrow=4)
m2<-rbind(vap, tv)
dimnames(m1)[[2]][1]<-"Pigglywiggly"
list.a<-list(m1, vap, 3)
my.data<-data.frame(cbind(vap, tv))
my.crazy.list<-list(vector1, gospels, my.matrix, TRUE, list.a)
my.crazy.list[[1]]
my.crazy.list[1]
names(my.crazy.list)<-c("OneTwoThree", "Gospels",
"SmallMat", "OneLogical", "AnotherList")
my.crazy.list[[1]]
my.crazy.list[1]
class(my.crazy.list[1])
class(my.crazy.list[[1]])
\item
\begin{enumerate}
\section*{for loops, if else, while}
game1 <- list("Game 1" =cbind(3   ,2 ),"Game 2" = cbind(1,2),
"Game 3" =cbind(8,4), "Game 4"= cbind(2, 1), "Game 5" = cbind(4, 6))
colname <- c("Player 1", "Player 2")
for (i in seq_along(game1)){colnames(game1[[i]]) <- colname}
game1
game2 <- list("Game 1" =cbind(3   ,3 ),"Game 2" = cbind(NA,2), "Game 3"
=cbind(8,4), "Game 4"= cbind(2, NA), "Game 5" = cbind(4, 4), "Game 5" = cbind(3, 4))
colname <- c("Player 1", "Player 2")
for (i in seq_along(game2)){colnames(game2[[i]]) <- colname}
game2
for (game in game1){
if (game[1] > game[2]){
print("Win")
} else {
print("Lose")
}
}
for (game in game2){
if(is.na(game[1])==T| is.na(game[2]==T)){
print("Warning, there were not enough values in this game")
}else if (game[1] > game[2]){
print("Win!")
}else if (game[1] == game[2]){
print("Tie!")
} else {
print("Lose :(")
}
}
total <- 0
while (TRUE) {
if (!total %in% 0:4) {
total <- 0L
}
n <- sample(c(2:12), 2)
cat("What is the product of ", n[1], " and ", n[2], "?\n", sep = "")
x <- as.integer(readline())
if (x == prod(n)) {
total <- total + 1L
cat("Right!")
if (total == 5) break
cat(" You just need", 5 - total, "more answers.\n\n")
} else {
cat("Wrong\n")
}
}
total <- 0
while (TRUE) {
if (!total %in% 0:4) {
total <- 0
}
n <- sample(c(2:12), 2)
cat("What is the product of ", n[1], " and ", n[2], "?\n", sep = "")
x <- as.integer(readline())
if (x == prod(n)) {
total <- total + 1
cat("Right!")
if (total == 5) break
cat(" You just need", 5 - total, "more answers.\n\n")
} else {
cat("Wrong\n")
}
}
total <- 0
while (TRUE) {
if (!total %in% 0:4) {
total <- 0
}
n <- sample(c(2:12), 2)
print("What is the product of ", n[1], " and ", n[2], "?\n", sep = "")
x <- as.integer(readline())
if (x == prod(n)) {
total <- total + 1
print("Right!")
if (total == 5) break
print(" You just need", 5 - total, "more answers.\n\n")
} else {
print("Wrong\n")
}
}
?cat
total <- 0
while (TRUE) {
if (!total %in% 0:4) {
total <- 0
}
n <- sample(c(2:12), 2)
cat("What is the product of ", n[1], " and ", n[2], "?\n", sep = "")
x <- as.integer(readline())
if (x == prod(n)) {
total <- total + 1
cat("Right!")
if (total == 5) break
cat(" You just need", 5 - total, "more answers.\n\n")
} else {
cat("Wrong\n")
}
}
setwd("C:/Users/dl0ck/OneDrive/Spring2020/Political Data Science/Problem Sets/PS 2")
gss<- read.csv('GSS_dataset')
gss<- read.csv('GSS_dataset.csv')
View(gss)
sum(gss$Vote.clinton.or.trump == "Trump")
sum(gss$Vote.clinton.or.trump == "Clinton")
